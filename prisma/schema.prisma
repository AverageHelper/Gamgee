generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Channel {
  /// The Snowflake string that identifies the channel in its guild.
  id String @id

  /// The Snowflake string that identifies the guild to which this channel belongs.
  guildId String

  @@map("channels")
}

model Guild {
  /// The Snowflake string that identifies the guild on Discord's platform.
  id String @id

  /// Whether the queue should accept new entries.
  isQueueOpen Boolean

  /// The Snowflake string that identifies the guild's queue channel.
  currentQueue String?

  /// The prefix that defines a command message from a normal message.
  /// `?` for example.
  messageCommandPrefix String?

  @@map("guilds")
}

model QueueConfig {
  /// The Snowflake string that identifies the queue channel in its
  /// guild. We assume (perhaps erroneously) that all of Discord's
  /// channel IDs are unique across their platform.
  channelId String @id

  /// The minimum number of seconds that each user must wait between
  /// their submissions. This cooldown counts from the entry's `sentAt`
  /// column. The cooldown does not apply to "rejected" submissions.
  /// Defaults to zero.
  cooldownSeconds Int?

  /// The upper limit to each user's total number of submittions in
  /// this queue. Each user's count is reset when this queue's contents
  /// are reset. This limit does not apply to "rejected" submissions.
  /// Defaults to infinity
  submissionMaxQuantity Int?

  /// The upper limit for the total duration of this queue if all of
  /// its media entries were played end to end.
  queueDurationSeconds Int?

  /// The upper limit for each entry's media duration in this queue.
  /// Defaults to infinity.
  entryDurationMaxSeconds Int? @map("entryDurationSeconds")

  /// The lower limit for each entry's media duration in this queue.
  /// Defaults to zero.
  entryDurationMinSeconds Int?

  /// The list of users who should not be permitted to submit to
  /// this queue. By default, all users are permitted to submit
  /// media requests to the queue.
  blacklistedUsers QueueConfigToBlacklistedUsers[]

  @@map("queue-configs")
}

model QueueConfigToBlacklistedUsers {
  queueConfigsChannelId String
  userId                String
  user                  User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  queue_configs         QueueConfig @relation(fields: [queueConfigsChannelId], references: [channelId], onDelete: Cascade)

  @@id([queueConfigsChannelId, userId])
  @@index([queueConfigsChannelId], map: "IDX_101755e5cbc7377bb432f30d58")
  @@index([userId], map: "IDX_8b53ee35922cb113a6d3102124")
  @@map("queue-configs_blacklisted_users_user")
}

model QueueEntry {
  /// The Snowflake string of the guild to which the entry belongs.
  guildId String

  /// The Snowflake string of the queue channel to which the entry
  /// belongs.
  channelId String

  /// The Snowflake string of this entry's message proxy in the
  /// queue channel.
  queueMessageId String @unique(map: "sqlite_autoindex_queue-entries_2")

  /// The URL to the requested media item.
  url String

  /// The playtime of the requested media, in seconds.
  seconds Int

  /// The time the entry entered the database. Should be unique,
  /// so as to keep a strict ordering and match the queue channel.
  sentAt DateTime @id

  /// The Snowflake string that identifies the user which sent the request.
  senderId String

  /// Whether the entry is considered "done" (finished, played, consumed, etc.)
  /// and should be ignored for time tracking purposes.
  isDone Boolean

  /// The list of users who have requested the link to the media.
  haveCalledNowPlaying User[]

  @@map("queue-entries")
}

model Role {
  id                String  @id
  guildId           String
  definesGuildAdmin Boolean
  definesQueueAdmin Boolean

  @@map("role")
}

model User {
  /// The Snowflake string that identifies the user (NOT the guild member)
  /// on Discord's platform.
  id String @id

  /// The list of queues in which the user is not allowed to submit requests.
  blacklistedQueues QueueConfigToBlacklistedUsers[]

  /// The list of entries for which the user has requested the URL.
  didCallNowPlayingForEntries QueueEntry[]

  @@map("user")
}
